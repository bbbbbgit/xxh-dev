#!/usr/bin/env xonsh
import os, sys, argparse, yaml

class XxhDevEnv(object):
    def __init__(self):
        with open('docker-compose.yml') as docker_compose:
            self.containers = sorted(yaml.load(docker_compose, Loader=yaml.FullLoader)['services'].keys())
        parser = argparse.ArgumentParser(
            usage='xde <command>\n\n'
                + 'xxh development environment commands:\n\n'
                + '   build       Build the docker containers and git clone the xxh repos if needed\n'
                + '   up          Docker-compose up the containers\n'
                + '   test    t   Run tests\n'
                + '   goto    g   Open bash by the container name part\n'
                + '   start       Docker-compose start the containers\n'
                + '   stop        Docker-compose stop the containers\n'
                + '   remove      Docker-compose remove the containers\n\n'
                + 'Try `./xde <command> --help` to get more info.\n')
        parser.add_argument('command', help='Command to run')

        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command\n')
            parser.print_help()
            sys.exit(1)

        getattr(self, args.command)()

    def build(self):
        base_path = pf"{os.path.realpath(__file__)}"
        xxh_path = base_path.parent.parent
        parent_name = str(xxh_path.name)
        if parent_name != 'xxh':
            print("Please create one distinct directory with name 'xxh' and place xxh-dev to it.\n"
                  "Try xde build again. Finally you could open xxh directory in IDE to commit to many repos.\n"
                  "STOP")
            sys.exit(1)

        clone_repos = ['xxh', 'xxh-shell-xonsh-appimage', 'xxh-plugin-xonsh-pipe-liner', 'xxh-plugin-xonsh-theme-bar',
                       'xxh-plugin-xonsh-autojump']

        repo_base_path = 'https://github.com/xxh'

        parser = argparse.ArgumentParser(description='')
        parser.add_argument('-v', '--verbose', action='store_true', help=f"Verbose mode")
        parser.add_argument('-rb', '--repo-base', default=repo_base_path, help=f"Repos base path. Default: {repo_base_path}")
        parser.usage = parser.format_usage().replace('usage: xde ', 'xde remove ')
        args = parser.parse_args(sys.argv[2:])

        repo_base_path = args.repo_base
        quiet = [] if args.verbose else ['-q']

        for repo in clone_repos:
            if not (xxh_path/repo).exists():
                print(f'git clone {repo}')
                git clone @(quiet) @(repo_base_path)/@(repo) @(xxh_path/repo)

        for dockerfile in sorted(p'.'.glob('xxh-dev-*.Dockerfile')):
            container_name = str(dockerfile).split('.Dockerfile')[0]
            print(f'docker build {container_name}')
            docker build . -f @(dockerfile) -t xxh/@(container_name) @(quiet)

    def up(self):
        parser = argparse.ArgumentParser(description='')
        parser.usage = parser.format_usage().replace('xde ', 'xde up ')
        args = parser.parse_args(sys.argv[2:])

        docker-compose up -d

    def start(self):
        parser = argparse.ArgumentParser(description='')
        parser.usage = parser.format_usage().replace('xde ', 'xde start ')
        args = parser.parse_args(sys.argv[2:])

        docker-compose start

    def stop(self):
        parser = argparse.ArgumentParser(description='')
        parser.usage = parser.format_usage().replace('xde ', 'xde stop ')
        args = parser.parse_args(sys.argv[2:])

        docker-compose stop

    def remove(self):
        parser = argparse.ArgumentParser(description='')
        parser.add_argument('-f', '--full', action='store_true', help=f"Full remove: containers, images")
        parser.usage = parser.format_usage().replace('usage: xde ', 'xde remove ')
        args = parser.parse_args(sys.argv[2:])

        docker-compose rm -f -s
        if args.full:
            docker image rm xxh/xxh-dev-start xxh/xxh-dev-ubuntu-k xxh/xxh-dev-ubuntu-kf

    def t(self):
        return self.test()

    def test(self):
        docker exec -it xxh-dev_start_1 xonsh /xxh/xxh-dev/tests/tests.xsh @(sys.argv[2:])

    def g(self):
        return self.goto()

    def goto(self):
        parser = argparse.ArgumentParser(description='')
        parser.add_argument('container', help=f"Container name: {', '.join(self.containers)}")
        parser.usage = parser.format_usage().replace('usage: xde ', 'xde goto ')
        args = parser.parse_args(sys.argv[2:])

        match_containers = [c for c in self.containers if args.container in c]
        matched_cnt = len(match_containers)

        if matched_cnt == 0:
            print(f"Container {args.container} not found among: {', '.join(self.containers)}")
            sys.exit(1)
        elif matched_cnt == 1 or match_containers[0] == args.container:
            args.container = match_containers[0]
        else:
            print(f"Container '{args.container}' found many times: {', '.join(match_containers)}")
            sys.exit(1)

        container_name = f'xxh-dev_{args.container}_1'
        docker exec -it @(container_name) bash

    def release(self):
        parser = argparse.ArgumentParser(description='')
        parser.add_argument('-r', '--remove', action='store_true', help=f"Remove build dirs after release")
        parser.usage = parser.format_usage().replace('xde ', 'xde release ')
        args = parser.parse_args(sys.argv[2:])

        cd ../xxh && python3 setup.py sdist bdist_wheel && twine upload dist/*

        if args.remove:
            print('Remove build dirs')
            rm -rf ./build ./dist ./xxh_xxh.egg-info


if __name__ == '__main__':
    XxhDevEnv()
