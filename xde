#!/usr/bin/env xonsh
import os, sys, argparse, yaml

class XxhDevEnv(object):
    def __init__(self):
        with open('docker-compose.yml') as docker_compose:
            self.containers = yaml.load(docker_compose, Loader=yaml.FullLoader)['services'].keys()
        parser = argparse.ArgumentParser(
            usage='''xde <command>

xxh development environment commands:

   build       Build the docker containers and get the xxh code if ./xxh is not exists
   up          Docker-compose up the containers
   test    t   Run tests
   goto    g   Open bash on the container
   start       Docker-compose start the containers
   stop        Docker-compose stop the containers
   remove      Docker-compose remove the containers
   
Try `./xde <command> --help` to get more info.   
   
''')
        parser.add_argument('command', help='Command to run')

        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command\n')
            parser.print_help()
            sys.exit(1)

        getattr(self, args.command)()

    def build(self):
        if not p'xxh'.exists():
            git clone --depth 1 https://github.com/xonssh/xxh

        docker build . -t xonssh/xxh-dev-ubuntu

    def up(self):
        docker-compose up -d

    def start(self):
        docker-compose start

    def stop(self):
        docker-compose stop

    def remove(self):
        docker-compose rm -f -s

    def t(self):
        return self.test()

    def test(self):
        docker exec -it xxh-dev_start_1 xonsh /xxh-dev/tests/tests.xsh @(sys.argv[2:])

    def g(self):
        return self.goto()

    def goto(self):
        parser = argparse.ArgumentParser(description='')
        parser.add_argument('container', help=f"Container name: {', '.join(self.containers)}")
        parser.usage = parser.format_usage().replace('usage: xde ', 'xde goto ')
        args = parser.parse_args(sys.argv[2:])

        match_containers = [c for c in self.containers if args.container in c]
        matched_cnt = len(match_containers)

        if matched_cnt == 0:
            print(f"Container {args.container} not found among: {', '.join(self.containers)}")
            sys.exit(1)
        elif matched_cnt == 1:
            args.container = match_containers[0]
        else:
            print(f"Container '{args.container}' found many times: {', '.join(match_containers)}")
            sys.exit(1)

        container_name = f'xxh-dev_{args.container}_1'
        docker exec -it @(container_name) bash

    def release(self):
        parser = argparse.ArgumentParser(description='')
        parser.add_argument('-rm', '--remove', action='store_true', help=f"Remove build dirs")
        parser.usage = parser.format_usage().replace('xde ', 'xde release ')
        args = parser.parse_args(sys.argv[2:])

        cd ./xxh && python3 setup.py sdist bdist_wheel && twine upload dist/*

        if args.remove:
            print('Remove build dirs')
            rm -rf ./build ./dist ./xonssh_xxh.egg-info


if __name__ == '__main__':
    XxhDevEnv()